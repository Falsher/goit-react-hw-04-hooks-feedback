{"version":3,"sources":["components/coffe/controlReview.js","components/coffe/reviewsInfo.js","components/coffe/notificationReviews.js","components/coffe/review.js","App.js","reportWebVitals.js","index.js"],"names":["ControlReview","onIncrementGood","onIncrementNeutral","onIncrementBad","className","type","onClick","ReviewsInfo","stateGood","stateNeutral","stateBad","countTotalFeedback","countPositiveFeedbackPercentage","Notification","message","defaultProps","ReviewCoffe","useState","good","setGood","neutral","setNeutral","bad","setBad","Math","round","prevState","App","initial","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAqBeA,EAnBO,SAAC,GAAD,IACpBC,EADoB,EACpBA,gBACAC,EAFoB,EAEpBA,mBACAC,EAHoB,EAGpBA,eAHoB,OAKpB,yBAASC,UAAU,kBAAnB,SACE,sBAAKA,UAAU,oBAAf,UACE,wBAAQC,KAAK,SAASD,UAAU,SAASE,QAASL,EAAlD,kBAGA,wBAAQI,KAAK,SAASD,UAAU,SAASE,QAASJ,EAAlD,qBAGA,wBAAQG,KAAK,SAASD,UAAU,SAASE,QAASH,EAAlD,uBCOSI,G,MApBK,SAAC,GAAD,IAClBC,EADkB,EAClBA,UACAC,EAFkB,EAElBA,aACAC,EAHkB,EAGlBA,SACAC,EAJkB,EAIlBA,mBACAC,EALkB,EAKlBA,gCALkB,OAOlB,yBAASR,UAAU,aAAnB,SACE,sBAAKA,UAAU,SAAf,UACE,uBAAMA,UAAU,oBAAhB,kBAA0CI,KAC1C,uBAAMJ,UAAU,uBAAhB,qBAAgDK,KAEhD,uBAAML,UAAU,mBAAhB,iBAAwCM,KACxC,uBAAMN,UAAU,qBAAhB,mBAA4CO,KAC5C,uBAAMP,UAAU,wBAAhB,+BACqBQ,EADrB,cCHSC,EAXM,SAAfA,EAAgB,GAAiB,IAAfC,EAAc,EAAdA,QAQtB,OAPAD,EAAaE,aAAe,CAC1BD,QAAS,IAMJ,4BAAIA,KCNE,SAASE,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAWMZ,EAAqBO,EAAOE,EAAUE,EACtCV,EAAkCY,KAAKC,MAC1CP,EAAOP,EAAsB,KAGhC,OACE,sBAAKP,UAAU,UAAf,UACE,cAAC,EAAD,CACEH,gBAlBqB,WACzBkB,GAAQ,SAAAO,GAAS,OAAIA,EAAY,MAkB7BxB,mBAhBwB,WAC5BmB,GAAW,SAAAK,GAAS,OAAIA,EAAY,MAgBhCvB,eAdoB,WACxBoB,GAAO,SAAAG,GAAS,OAAIA,EAAY,QAe7Bf,EAAqB,EACpB,cAAC,EAAD,CACEH,UAAWU,EACXT,aAAcW,EACdV,SAAUY,EACVX,mBAAoBA,EACpBC,gCAAiCA,IAGnC,cAAC,EAAD,CAAcE,QAAQ,yBCrC9B,IAQea,EARH,kBACV,mCACE,0BAASvB,UAAU,QAAnB,UACE,4CACA,cAAC,EAAD,CAASwB,QAAS,UCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea48207b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/controlReview.css';\r\nconst ControlReview = ({\r\n  onIncrementGood,\r\n  onIncrementNeutral,\r\n  onIncrementBad,\r\n}) => (\r\n  <section className=\"FeedbackOptions\">\r\n    <div className=\"Counter__controls\">\r\n      <button type=\"button\" className=\"button\" onClick={onIncrementGood}>\r\n        Good\r\n      </button>\r\n      <button type=\"button\" className=\"button\" onClick={onIncrementNeutral}>\r\n        Neutral\r\n      </button>\r\n      <button type=\"button\" className=\"button\" onClick={onIncrementBad}>\r\n        Bad\r\n      </button>\r\n    </div>\r\n  </section>\r\n);\r\nexport default ControlReview;\r\n","import React from 'react';\r\nimport './css/reviewsInfo.css';\r\nconst ReviewsInfo = ({\r\n  stateGood,\r\n  stateNeutral,\r\n  stateBad,\r\n  countTotalFeedback,\r\n  countPositiveFeedbackPercentage,\r\n}) => (\r\n  <section className=\"Statistics\">\r\n    <div className=\"Review\">\r\n      <span className=\"Review__goodValue\">Good:{stateGood}</span>\r\n      <span className=\"Review__neutralValue\">Neutral:{stateNeutral}</span>\r\n\r\n      <span className=\"Review__badValue\">Bad:{stateBad}</span>\r\n      <span className=\"Review__totalValue\">Total:{countTotalFeedback}</span>\r\n      <span className=\"Review__feedbackValue\">\r\n        Positive feedback:{countPositiveFeedbackPercentage}%\r\n      </span>\r\n    </div>\r\n  </section>\r\n);\r\nexport default ReviewsInfo;\r\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  Notification.defaultProps = {\n    message: '',\n  };\n  Notification.propTypes = {\n    message: PropTypes.string,\n  };\n\n  return <p>{message}</p>;\n};\n\nexport default Notification;\n","import { useState } from 'react';\nimport ConrolReview from './controlReview';\nimport ReviewsInfo from './reviewsInfo';\nimport Notification from './notificationReviews';\nexport default function ReviewCoffe() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const handlIncrementGood = () => {\n    setGood(prevState => prevState + 1);\n  };\n  const handlIncrementNeutral = () => {\n    setNeutral(prevState => prevState + 1);\n  };\n  const handlIncrementBad = () => {\n    setBad(prevState => prevState + 1);\n  };\n\n  const countTotalFeedback = good + neutral + bad;\n  const countPositiveFeedbackPercentage = Math.round(\n    (good / countTotalFeedback) * 100,\n  );\n\n  return (\n    <div className=\"Counter\">\n      <ConrolReview\n        onIncrementGood={handlIncrementGood}\n        onIncrementNeutral={handlIncrementNeutral}\n        onIncrementBad={handlIncrementBad}\n      />\n      {countTotalFeedback > 0 ? (\n        <ReviewsInfo\n          stateGood={good}\n          stateNeutral={neutral}\n          stateBad={bad}\n          countTotalFeedback={countTotalFeedback}\n          countPositiveFeedbackPercentage={countPositiveFeedbackPercentage}\n        />\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </div>\n  );\n}\n","import Counter from './components/coffe/review';\n\nconst App = () => (\n  <>\n    <section className=\"title\">\n      <h1>Statistics</h1>\n      <Counter initial={0} />\n    </section>\n  </>\n);\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}